--Part 1
--1)
SELECT 
    s.first_name,
    s.last_name,
    s.salary,
    s.industry,
    (SELECT CONCAT(first_name, ' ', last_name) 
     FROM Salary s2 
     WHERE s2.industry = s.industry 
     ORDER BY s2.salary DESC 
     LIMIT 1) AS name_highest_sal
FROM Salary s
WHERE s.salary = (
    SELECT MAX(salary) 
    FROM Salary s2 
    WHERE s2.industry = s.industry
);


WITH RankedSalaries AS (
    SELECT 
        first_name,
        last_name,
        salary,
        industry,
        FIRST_VALUE(CONCAT(first_name, ' ', last_name)) 
            OVER (PARTITION BY industry ORDER BY salary DESC) AS name_highest_sal
    FROM Salary
)
SELECT 
    first_name,
    last_name,
    salary,
    industry,
    name_highest_sal
FROM RankedSalaries
WHERE salary = (
    SELECT MAX(salary) 
    FROM Salary s2 
    WHERE s2.industry = RankedSalaries.industry
);

--2)
SELECT 
    s.first_name,
    s.last_name,
    s.salary,
    s.industry,
    (SELECT CONCAT(first_name, ' ', last_name) 
     FROM Salary s2 
     WHERE s2.industry = s.industry 
     ORDER BY s2.salary ASC 
     LIMIT 1) AS name_lowest_sal
FROM Salary s
WHERE s.salary = (
    SELECT MIN(salary) 
    FROM Salary s2 
    WHERE s2.industry = s.industry
);

WITH RankedSalaries AS (
    SELECT 
        first_name,
        last_name,
        salary,
        industry,
        LAST_VALUE(CONCAT(first_name, ' ', last_name)) 
            OVER (PARTITION BY industry ORDER BY salary ASC 
                  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS name_lowest_sal
    FROM Salary
)
SELECT 
    first_name,
    last_name,
    salary,
    industry,
    name_lowest_sal
FROM RankedSalaries
WHERE salary = (
    SELECT MIN(salary) 
    FROM Salary s2 
    WHERE s2.industry = RankedSalaries.industry
);



--Part 2

--1)
SELECT 
    S.SHOPNUMBER,
    S.CITY,
    S.ADDRESS,
    SUM(SA.QTY) AS SUM_QTY,
    SUM(SA.QTY * G.PRICE) AS SUM_QTY_PRICE
FROM 
    SALES SA
JOIN 
    SHOPS S ON SA.SHOPNUMBER = S.SHOPNUMBER
JOIN 
    GOODS G ON SA.ID_GOOD = G.ID_GOOD
WHERE 
    SA.DATE = '2016-01-02'
GROUP BY 
    S.SHOPNUMBER, S.CITY, S.ADDRESS;

--2)
SELECT 
    SA.DATE AS DATE_,
    S.CITY,
    SUM(SA.QTY * G.PRICE) / SUM(SUM(SA.QTY * G.PRICE)) OVER (PARTITION BY SA.DATE) AS SUM_SALES_REL
FROM SALES SA
JOIN GOODS G ON SA.ID_GOOD = G.ID_GOOD
JOIN SHOPS S ON SA.SHOPNUMBER = S.SHOPNUMBER
WHERE 
    G.CATEGORY = 'ЧИСТОТА'
GROUP BY 
    SA.DATE, S.CITY;

--3)
WITH RankedSales AS (
    SELECT 
        SA.DATE AS DATE_,
        SA.SHOPNUMBER,
        SA.ID_GOOD,
        RANK() OVER (PARTITION BY SA.DATE, SA.SHOPNUMBER ORDER BY SUM(SA.QTY) DESC) AS Rank
    FROM 
        SALES SA
    GROUP BY 
        SA.DATE, SA.SHOPNUMBER, SA.ID_GOOD
)
SELECT 
    DATE_,
    SHOPNUMBER,
    ID_GOOD
FROM 
    RankedSales
WHERE 
    Rank <= 3;


--4)
WITH PreviousSales AS (
    SELECT 
        SA.DATE AS DATE_,
        SA.SHOPNUMBER,
        G.CATEGORY,
        LAG(SUM(SA.QTY * G.PRICE)) OVER (PARTITION BY SA.SHOPNUMBER, G.CATEGORY ORDER BY SA.DATE) AS PREV_SALES
    FROM SALES SA
    JOIN GOODS G ON SA.ID_GOOD = G.ID_GOOD
    JOIN SHOPS S ON SA.SHOPNUMBER = S.SHOPNUMBER
    WHERE 
        S.CITY = 'СПб'
    GROUP BY 
        SA.DATE, SA.SHOPNUMBER, G.CATEGORY
)
SELECT 
    DATE_,
    SHOPNUMBER,
    CATEGORY,
    PREV_SALES
FROM 
    PreviousSales;


--Part 3

-- Создание таблицы query
CREATE TABLE query (
    searchid INT PRIMARY KEY,
    year INT,
    month INT,
    day INT,
    userid INT,
    ts BIGINT,
    devicetype VARCHAR(50),
    deviceid VARCHAR(50),
    query VARCHAR(255)
);

-- Вставка данных в таблицу query
INSERT INTO query (searchid, year, month, day, userid, ts, devicetype, deviceid, query)
VALUES
(1, 2023, 10, 1, 101, 1696156800, 'android', 'device1', 'к'),
(2, 2023, 10, 1, 101, 1696156860, 'android', 'device1', 'ку'),
(3, 2023, 10, 1, 101, 1696156920, 'android', 'device1', 'куп'),
(4, 2023, 10, 1, 101, 1696156980, 'android', 'device1', 'купить'),
(5, 2023, 10, 1, 101, 1696157040, 'android', 'device1', 'купить кур'),
(6, 2023, 10, 1, 101, 1696157100, 'android', 'device1', 'купить куртку'),
(7, 2023, 10, 1, 102, 1696157160, 'ios', 'device2', 'платье'),
(8, 2023, 10, 1, 102, 1696157220, 'ios', 'device2', 'платье красное'),
(9, 2023, 10, 1, 103, 1696157280, 'android', 'device3', 'телефон'),
(10, 2023, 10, 1, 103, 1696157340, 'android', 'device3', 'телефон samsung'),
(11, 2023, 10, 1, 104, 1696157400, 'android', 'device4', 'ноутбук'),
(12, 2023, 10, 1, 104, 1696157460, 'android', 'device4', 'ноутбук asus'),
(13, 2023, 10, 1, 105, 1696157520, 'ios', 'device5', 'кофе'),
(14, 2023, 10, 1, 105, 1696157580, 'ios', 'device5', 'кофе зерновой'),
(15, 2023, 10, 1, 106, 1696157640, 'android', 'device6', 'книга'),
(16, 2023, 10, 1, 106, 1696157700, 'android', 'device6', 'книга фантастика'),
(17, 2023, 10, 1, 107, 1696157760, 'android', 'device7', 'часы'),
(18, 2023, 10, 1, 107, 1696157820, 'android', 'device7', 'часы наручные'),
(19, 2023, 10, 1, 108, 1696157880, 'ios', 'device8', 'сумка'),
(20, 2023, 10, 1, 108, 1696157940, 'ios', 'device8', 'сумка кожаная');

-- Определение is_final и вывод данных
WITH QueryData AS (
    SELECT 
        year,
        month,
        day,
        userid,
        ts,
        devicetype,
        deviceid,
        query,
        LEAD(query) OVER (PARTITION BY userid, deviceid ORDER BY ts) AS next_query,
        LEAD(ts) OVER (PARTITION BY userid, deviceid ORDER BY ts) AS next_ts
    FROM 
        query
)
SELECT 
    year,
    month,
    day,
    userid,
    ts,
    devicetype,
    deviceid,
    query,
    next_query,
    CASE 
        WHEN next_ts IS NULL THEN 1
        WHEN next_ts - ts > 180 THEN 1
        WHEN LENGTH(query) > LENGTH(next_query) AND next_ts - ts > 60 THEN 2
        ELSE 0
    END AS is_final
FROM QueryData
WHERE 
    devicetype = 'android' AND (is_final = 1 OR is_final = 2);
